import asyncio
import feedparser
import requests
import re
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.utils.markdown import hbold
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
import pytz

# üîé –í—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á
TOKEN = "7918775198:AAFCyInMQMed_GDo0HXBnRPxTrGB-IhaGnY"
CHANNEL_ID = "@newspoliticcccals"

# üåç –°–ø–∏—Å–æ–∫ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¢–æ–ª—å–∫–æ –Ω–∞ —É–∫—Ä —è–∑—ã–∫–µ –∏ –ø–æ —Ç–µ–º–µ –ø–æ–ª–∏—Ç–∏–∫–∏/–≤–æ–π–Ω–∞)
RSS_FEEDS = [
    "https://censor.net/rss/all.xml",         # –¶–µ–Ω–∑–æ—Ä.–ù–ï–¢ (–ø–æ–ª–∏—Ç–∏–∫–∞, –≤–æ–π–Ω–∞)
    "https://glavcom.ua/rss/all.xml",        # –ì–ª–∞–≤–∫–æ–º (–ø–æ–ª–∏—Ç–∏–∫–∞, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    "https://telegraf.com.ua/rss.xml",       # –¢–µ–ª–µ–≥—Ä–∞—Ñ (–Ω–æ–≤–æ—Å—Ç–∏, —ç–∫–æ–Ω–æ–º–∏–∫–∞)
    "https://focus.ua/rss/all.xml",          # –§–æ–∫—É—Å (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø–æ–ª–∏—Ç–∏–∫–∞, –≤–æ–π–Ω–∞)
    "https://tsn.ua/rss/full.rss",           # –¢–°–ù
    "https://24tv.ua/rss/all.xml",           # 24 –∫–∞–Ω–∞–ª
    "https://rss.unian.net/site/news_ukr.rss", # –£–ù–ò–ê–ù
    "https://news.liga.net/news/rss.xml",     # –õ–∏–≥–∞.–ù–æ–≤–æ—Å—Ç–∏
]

# üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üìÇ –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
posted_links = set()

def clean_html(text):
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
    return re.sub(r"<[^>]+>", "", text)

async def fetch_news():
    """ üñâ –ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫."""
    global posted_links
    tz = pytz.timezone("Europe/Kyiv")

    while True:
        now = datetime.now(tz)
        if 0 <= now.hour < 7:
            num_posts = 3
            total_minutes = (7 * 60) - (now.hour * 60 + now.minute)
            if num_posts > total_minutes:
                await asyncio.sleep(60)
                continue
            post_times = sorted([datetime.now() + timedelta(minutes=random.randint(1, total_minutes)) for _ in range(num_posts)])
        else:
            num_posts = 4
            post_times = sorted([datetime.now() + timedelta(minutes=random.randint(1, 59)) for _ in range(num_posts)])

        news_posts = []
        for feed_url in RSS_FEEDS:
            feed = feedparser.parse(feed_url)
            for entry in feed.entries[:3]:
                title = entry.title
                link = entry.link
                summary = entry.summary if hasattr(entry, "summary") else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                summary = clean_html(summary)
                if link in posted_links:
                    continue
                post_text = f"<b>{hbold(title)}</b>\n\n{summary}\n\n<a href='{link}'>–ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—å—é</a>"
                news_posts.append(post_text)
                posted_links.add(link)

        selected_posts = random.sample(news_posts, min(num_posts, len(news_posts)))

        for post_text, post_time in zip(selected_posts, post_times):
            wait_time = (post_time - datetime.now()).total_seconds()
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {wait_time // 60:.0f} –º–∏–Ω—É—Ç")
            await asyncio.sleep(wait_time)
            await bot.send_message(CHANNEL_ID, post_text)

        print("üì∞ –ü–æ—Å—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª")
        await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞

async def main():
    await fetch_news()

if __name__ == "__main__":
    asyncio.run(main())


