import asyncio
import feedparser
import requests
import re
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.utils.markdown import hbold
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties

# üîπ –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–ª—é—á–∏
TOKEN = "7918775198:AAFCYlnMQMed_GDo0HXBnRPxTrGB-IhaGnY"
CHANNEL_ID = "@newspoliticcccals"
TOGETHER_AI_API_KEY = "9b98ca24fd81a201eb22ba1d9603f27b96cf7122f8e9a9e70b392b2ca678ab6c"

# üîπ –°–ø–∏—Å–æ–∫ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –£–∫—Ä–∞–∏–Ω—ã)
RSS_FEEDS = [
    "https://www.pravda.com.ua/rss/view_news/",
    "https://tsn.ua/rss/full.rss",
    "https://24tv.ua/rss/all.xml",
    "https://rss.unian.net/site/news_ukr.rss",
    "https://news.liga.net/news/rss.xml",
    "https://www.rbc.ua/static/rss/all.rus.rss.xml",
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
posted_links = set()

def clean_html(text):
    """–£–¥–∞–ª—è–µ—Ç HTML-—Ç–µ–≥–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
    return re.sub(r'<[^>]+>', '', text)

async def fetch_news():
    """–ü—É–±–ª–∏–∫—É–µ—Ç 5 –ø–æ—Å—Ç–æ–≤ –≤ —á–∞—Å –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è."""
    global posted_links
    while True:
        try:
            news_posts = []
            for feed_url in RSS_FEEDS:
                feed = feedparser.parse(feed_url)
                for entry in feed.entries[:3]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    title = entry.title
                    link = entry.link
                    summary = entry.summary if hasattr(entry, "summary") else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
                    summary = clean_html(summary)

                    if link in posted_links:
                        continue

                    post_text = f"üì∞ {hbold(title)}\n\n{summary}\n\nüîó <a href='{link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
                    news_posts.append(post_text)
                    posted_links.add(link)

            if news_posts:
                # –í—ã–±–∏—Ä–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                selected_posts = random.sample(news_posts, min(5, len(news_posts)))
                post_times = sorted([datetime.now() + timedelta(minutes=random.randint(1, 59)) for _ in range(len(selected_posts))])

                for post_text, post_time in zip(selected_posts, post_times):
                    wait_time = (post_time - datetime.now()).total_seconds()
                    print(f"üïí –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {wait_time // 60:.0f} –º–∏–Ω—É—Ç ({post_time.strftime('%H:%M')})")
                    await asyncio.sleep(wait_time)
                    await bot.send_message(CHANNEL_ID, post_text)

            print("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å.")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        await asyncio.sleep(3600)  # –ñ–¥—ë–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await fetch_news()

if __name__ == "__main__":
    asyncio.run(main())
